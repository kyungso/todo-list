{"ast":null,"code":"import { Map } from 'immutable';\nimport { handleActions, createAction } from 'redux-actions';\nconst INSERT = 'todos/INSERT';\nconst TOGGLE = 'todos/TOGGLE';\nconst REMOVE = 'todos/REMOVE';\nexport const insert = createAction(INSERT);\nexport const toggle = createAction(TOGGLE);\nexport const remove = createAction(REMOVE);\nconst initialState = List([Map({\n  id: 0,\n  text: '리액트 공부하기',\n  done: true\n}), Map({\n  id: 1,\n  text: '컴포넌트 스타일링 해보기',\n  done: false\n})]);\nexport default handleActions({\n  [INSERT]: (state, action) => {\n    /*\n    payload 안에 있는 id, text, done의 레퍼런스를 만들어 줍니다.\n    레퍼런스를 만들지 않고, 바로 push(Map(action.payload))를 해도 되지만,\n    나중에 이 코드를 보았을 때,\n    이 액션이 어떤 데이터를 처리하는지 쉽게 볼 수 있도록 하는 작업입니다.\n    */\n    const _action$payload = action.payload,\n          id = _action$payload.id,\n          text = _action$payload.text,\n          done = _action$payload.done;\n    return state.push(Map({\n      id,\n      text,\n      done\n    }));\n  },\n  [TOGGLE]: (state, action) => {\n    const index = action.payload; // = const index = action.payload;\n    //updateIn으로 현재 값을 참조하여 반대 값으로 설정합니다.\n\n    return state.updateIn([index, 'done'], done => !done);\n    /*\n     = return state.setIn([index, 'done'], !state.getIn([0, index]));\n    */\n  },\n  [REMOVE]: (state, action) => {\n    const index = action.payload;\n    return state.delete(index);\n  }\n}, initialState);","map":{"version":3,"sources":["/Users/ksjung/frontend_study/velopert_book/todo-list/src/modules/todos.js"],"names":["Map","handleActions","createAction","INSERT","TOGGLE","REMOVE","insert","toggle","remove","initialState","List","id","text","done","state","action","payload","push","index","updateIn","delete"],"mappings":"AAAA,SAASA,GAAT,QAAoB,WAApB;AACA,SAASC,aAAT,EAAwBC,YAAxB,QAA4C,eAA5C;AAEA,MAAMC,MAAM,GAAG,cAAf;AACA,MAAMC,MAAM,GAAG,cAAf;AACA,MAAMC,MAAM,GAAG,cAAf;AAEA,OAAO,MAAMC,MAAM,GAAGJ,YAAY,CAACC,MAAD,CAA3B;AACP,OAAO,MAAMI,MAAM,GAAGL,YAAY,CAACE,MAAD,CAA3B;AACP,OAAO,MAAMI,MAAM,GAAGN,YAAY,CAACG,MAAD,CAA3B;AAEP,MAAMI,YAAY,GAAGC,IAAI,CAAC,CACtBV,GAAG,CAAC;AACAW,EAAAA,EAAE,EAAE,CADJ;AAEAC,EAAAA,IAAI,EAAE,UAFN;AAGAC,EAAAA,IAAI,EAAE;AAHN,CAAD,CADmB,EAMtBb,GAAG,CAAC;AACAW,EAAAA,EAAE,EAAE,CADJ;AAEAC,EAAAA,IAAI,EAAE,eAFN;AAGAC,EAAAA,IAAI,EAAE;AAHN,CAAD,CANmB,CAAD,CAAzB;AAaA,eAAeZ,aAAa,CAAC;AACzB,GAACE,MAAD,GAAU,CAACW,KAAD,EAAQC,MAAR,KAAmB;AACzB;;;;;;AADyB,4BAOEA,MAAM,CAACC,OAPT;AAAA,UAOjBL,EAPiB,mBAOjBA,EAPiB;AAAA,UAObC,IAPa,mBAObA,IAPa;AAAA,UAOPC,IAPO,mBAOPA,IAPO;AASzB,WAAOC,KAAK,CAACG,IAAN,CAAWjB,GAAG,CAAC;AAClBW,MAAAA,EADkB;AAElBC,MAAAA,IAFkB;AAGlBC,MAAAA;AAHkB,KAAD,CAAd,CAAP;AAKH,GAfwB;AAgBzB,GAACT,MAAD,GAAU,CAACU,KAAD,EAAQC,MAAR,KAAmB;AAAA,UACRG,KADQ,GACEH,MADF,CACjBC,OADiB,EAEzB;AAEA;;AACA,WAAOF,KAAK,CAACK,QAAN,CAAe,CAACD,KAAD,EAAQ,MAAR,CAAf,EAAgCL,IAAI,IAAI,CAACA,IAAzC,CAAP;AACA;;;AAGH,GAzBwB;AA0BzB,GAACR,MAAD,GAAU,CAACS,KAAD,EAAQC,MAAR,KAAmB;AAAA,UACRG,KADQ,GACEH,MADF,CACjBC,OADiB;AAEzB,WAAOF,KAAK,CAACM,MAAN,CAAaF,KAAb,CAAP;AACH;AA7BwB,CAAD,EA8BzBT,YA9ByB,CAA5B","sourcesContent":["import { Map } from 'immutable';\nimport { handleActions, createAction } from 'redux-actions';\n\nconst INSERT = 'todos/INSERT';\nconst TOGGLE = 'todos/TOGGLE';\nconst REMOVE = 'todos/REMOVE';\n\nexport const insert = createAction(INSERT);\nexport const toggle = createAction(TOGGLE);\nexport const remove = createAction(REMOVE);\n\nconst initialState = List([\n    Map({\n        id: 0,\n        text: '리액트 공부하기',\n        done: true\n    }),\n    Map({\n        id: 1,\n        text: '컴포넌트 스타일링 해보기',\n        done: false\n    })\n]);\n\nexport default handleActions({\n    [INSERT]: (state, action) => {\n        /*\n        payload 안에 있는 id, text, done의 레퍼런스를 만들어 줍니다.\n        레퍼런스를 만들지 않고, 바로 push(Map(action.payload))를 해도 되지만,\n        나중에 이 코드를 보았을 때,\n        이 액션이 어떤 데이터를 처리하는지 쉽게 볼 수 있도록 하는 작업입니다.\n        */\n        const { id, text, done } = action.payload;\n\n        return state.push(Map({\n            id,\n            text,\n            done\n        }));\n    },\n    [TOGGLE]: (state, action) => {\n        const { payload: index } = action; \n        // = const index = action.payload;\n\n        //updateIn으로 현재 값을 참조하여 반대 값으로 설정합니다.\n        return state.updateIn([index, 'done'], done => !done);\n        /*\n         = return state.setIn([index, 'done'], !state.getIn([0, index]));\n        */\n    },\n    [REMOVE]: (state, action) => {\n        const { payload: index } = action;\n        return state.delete(index);\n    }\n}, initialState)"]},"metadata":{},"sourceType":"module"}